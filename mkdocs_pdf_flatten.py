#!/usr/bin/python
#
from __future__ import print_function

import argparse
import sys
import mkdocs.config
from pdf_flatten.exceptions import FatalError

import pdf_flatten

def main():
    opts = argparse.ArgumentParser(
            description="mkdocs_pdf_flatten.py " +
            "- Parses mkdocs.yml and compiles single PDF from many generated by mkdocs-pdf-export-plugin")

    opts.add_argument('-e', '--encoding', default='utf-8',
            help="Set encoding for input files (default: utf-8)")

    opts.add_argument('-f', '--config-file', default='mkdocs.yml',
            help="mkdocs configuration file to use")

    opts.add_argument('-o', '--outfile', default=None,
            help="File to write finished pandoc document to (default: STDOUT)")

    args = opts.parse_args()

    try:
      pconv = pdf_flatten.PdfTreeFlatten(
                config_file=args.config_file,
                encoding=args.encoding,
                outfile=args.outfile,
                )
    except FatalError as e:
        print(e.message, file=sys.stderr)
        return(e.status)

    pconv.convert()

if __name__ == "__main__":
  main()